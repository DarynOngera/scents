---
// Shopping Cart component (Astro Island for interactivity)
---

<div id="cart-modal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Shopping Cart</h2>
        <div id="cart-items"></div>
        <div class="cart-total">
            <h3>Total: $<span id="cart-total">0</span></h3>
        </div>
        <button class="checkout-btn">Proceed to Checkout</button>
    </div>
</div>

<style>
/* Modal */
.modal {
    display: none;
    position: fixed;
    z-index: 2000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
}

.modal-content {
    background-color: white;
    margin: 5% auto;
    padding: 2rem;
    border-radius: 10px;
    width: 90%;
    max-width: 500px;
    position: relative;
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
    position: absolute;
    right: 1rem;
    top: 1rem;
}

.close:hover {
    color: #2c2c2c;
}

.cart-total {
    text-align: center;
    margin: 2rem 0;
    padding: 1rem;
    background: #f8f8f8;
    border-radius: 5px;
}

.checkout-btn {
    width: 100%;
    background: #8b7355;
    color: white;
    border: none;
    padding: 15px;
    cursor: pointer;
    border-radius: 5px;
    font-size: 1rem;
    font-weight: 500;
    transition: background 0.3s ease;
}

.checkout-btn:hover {
    background: #2c2c2c;
}

.cart-item {
    border-bottom: 1px solid #eee;
}

.cart-item:last-child {
    border-bottom: none;
}
</style>

<script>
// Shopping Cart functionality - Client-side interactivity
class ShoppingCart {
    constructor() {
        this.cart = [];
        this.cartCount = 0;
        this.init();
    }

    init() {
        this.bindEvents();
        this.updateCartDisplay();
    }

    bindEvents() {
        // Cart modal events
        const cartIcon = document.querySelector('.cart-icon');
        const cartModal = document.getElementById('cart-modal');
        const closeModal = document.querySelector('.close');

        if (cartIcon) cartIcon.addEventListener('click', () => this.openCart());
        if (closeModal) closeModal.addEventListener('click', () => this.closeCart());

        // Add to cart buttons
        document.querySelectorAll('.add-to-cart').forEach(button => {
            button.addEventListener('click', (e) => this.addToCart(e));
        });

        // Quick view buttons
        document.querySelectorAll('.quick-view').forEach(button => {
            button.addEventListener('click', (e) => this.showQuickView(e));
        });

        // Mobile navigation
        const hamburger = document.querySelector('.hamburger');
        const navMenu = document.querySelector('.nav-menu');
        if (hamburger) {
            hamburger.addEventListener('click', () => this.toggleMobileMenu());
        }

        // Smooth scrolling for navigation links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Close modal when clicking outside
        window.addEventListener('click', (event) => {
            const cartModal = document.getElementById('cart-modal');
            if (event.target === cartModal) {
                this.closeCart();
            }
        });

        // Navbar scroll effect
        window.addEventListener('scroll', this.handleNavbarScroll);
    }

    addToCart(event) {
        const button = event.target;
        const productCard = button.closest('.product-card');
        const productName = productCard.querySelector('h3').textContent;
        const productPrice = parseFloat(button.dataset.price);
        const productId = button.dataset.product;

        // Check if item already exists in cart
        const existingItem = this.cart.find(item => item.id === productId);

        if (existingItem) {
            existingItem.quantity += 1;
        } else {
            this.cart.push({
                id: productId,
                name: productName,
                price: productPrice,
                quantity: 1
            });
        }

        this.cartCount++;
        this.updateCartDisplay();
        this.showAddToCartFeedback(button);
    }

    removeFromCart(productId) {
        const itemIndex = this.cart.findIndex(item => item.id === productId);
        if (itemIndex > -1) {
            const item = this.cart[itemIndex];
            this.cartCount -= item.quantity;
            this.cart.splice(itemIndex, 1);
            this.updateCartDisplay();
        }
    }

    updateQuantity(productId, newQuantity) {
        const item = this.cart.find(item => item.id === productId);
        if (item) {
            const oldQuantity = item.quantity;
            item.quantity = Math.max(0, newQuantity);
            this.cartCount += (item.quantity - oldQuantity);

            if (item.quantity === 0) {
                this.removeFromCart(productId);
            } else {
                this.updateCartDisplay();
            }
        }
    }

    updateCartDisplay() {
        const cartCountElement = document.querySelector('.cart-count');
        const cartItemsContainer = document.getElementById('cart-items');
        const cartTotalElement = document.getElementById('cart-total');

        if (cartCountElement) cartCountElement.textContent = this.cartCount;

        if (cartItemsContainer) {
            cartItemsContainer.innerHTML = '';
            let total = 0;

            if (this.cart.length === 0) {
                cartItemsContainer.innerHTML = '<p style="text-align: center; color: #666; padding: 2rem;">Your cart is empty</p>';
            } else {
                this.cart.forEach(item => {
                    const itemTotal = item.price * item.quantity;
                    total += itemTotal;

                    const cartItem = document.createElement('div');
                    cartItem.className = 'cart-item';
                    cartItem.innerHTML = `
                        <div style="display: flex; justify-content: space-between; align-items: center; padding: 1rem;">
                            <div>
                                <h4 style="margin-bottom: 0.5rem;">${item.name}</h4>
                                <p style="color: #666;">$${item.price}</p>
                            </div>
                            <div style="display: flex; align-items: center; gap: 1rem;">
                                <div style="display: flex; align-items: center; gap: 0.5rem;">
                                    <button onclick="cart.updateQuantity('${item.id}', ${item.quantity - 1})" style="background: #f0f0f0; border: none; width: 30px; height: 30px; border-radius: 50%; cursor: pointer;">-</button>
                                    <span style="min-width: 20px; text-align: center;">${item.quantity}</span>
                                    <button onclick="cart.updateQuantity('${item.id}', ${item.quantity + 1})" style="background: #f0f0f0; border: none; width: 30px; height: 30px; border-radius: 50%; cursor: pointer;">+</button>
                                </div>
                                <button onclick="cart.removeFromCart('${item.id}')" style="background: #ff4444; color: white; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer;">Remove</button>
                            </div>
                        </div>
                    `;
                    cartItemsContainer.appendChild(cartItem);
                });
            }

            if (cartTotalElement) cartTotalElement.textContent = total.toFixed(2);
        }
    }

    openCart() {
        const cartModal = document.getElementById('cart-modal');
        if (cartModal) {
            cartModal.style.display = 'block';
            document.body.style.overflow = 'hidden';
        }
    }

    closeCart() {
        const cartModal = document.getElementById('cart-modal');
        if (cartModal) {
            cartModal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
    }

    showAddToCartFeedback(button) {
        const originalText = button.textContent;
        button.textContent = 'Added!';
        button.style.background = '#4CAF50';

        setTimeout(() => {
            button.textContent = originalText;
            button.style.background = '';
        }, 1500);
    }

    showQuickView(event) {
        event.stopPropagation();
        const productCard = event.target.closest('.product-card');
        const productName = productCard.querySelector('h3').textContent;
        const productDescription = productCard.querySelector('.product-description').textContent;
        const productPrice = productCard.querySelector('.product-price').textContent;
        const productId = event.target.dataset.product;

        const quickViewModal = document.createElement('div');
        quickViewModal.className = 'modal';
        quickViewModal.style.display = 'block';
        quickViewModal.innerHTML = `
            <div class="modal-content" style="max-width: 600px;">
                <span class="close" onclick="this.parentElement.parentElement.remove(); document.body.style.overflow = 'auto';">&times;</span>
                <h2>${productName}</h2>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin: 2rem 0;">
                    <div style="height: 300px; background: linear-gradient(145deg, #f8f8f8, #e8e8e8); border-radius: 10px; display: flex; align-items: center; justify-content: center;">
                        <div style="width: 80px; height: 120px; background: linear-gradient(145deg, #e0e0e0, #d0d0d0); border-radius: 10px 10px 30px 30px;"></div>
                    </div>
                    <div>
                        <p style="margin-bottom: 1rem; line-height: 1.6;">${productDescription}</p>
                        <div style="font-size: 1.5rem; font-weight: 600; color: #8b7355; margin-bottom: 1rem;">${productPrice}</div>
                        <button onclick="this.closest('.modal').remove(); document.body.style.overflow = 'auto'; document.querySelector('[data-product=\"${productId}\"]').click();" style="width: 100%; background: #2c2c2c; color: white; border: none; padding: 12px; cursor: pointer; border-radius: 5px;">Add to Cart</button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(quickViewModal);
        document.body.style.overflow = 'hidden';

        quickViewModal.addEventListener('click', function(event) {
            if (event.target === quickViewModal) {
                quickViewModal.remove();
                document.body.style.overflow = 'auto';
            }
        });
    }

    toggleMobileMenu() {
        const navMenu = document.querySelector('.nav-menu');
        const hamburger = document.querySelector('.hamburger');
        
        if (navMenu) navMenu.classList.toggle('active');
        
        if (hamburger) {
            hamburger.classList.toggle('active');
            const spans = hamburger.querySelectorAll('span');
            if (hamburger.classList.contains('active')) {
                spans[0].style.transform = 'rotate(45deg) translate(5px, 5px)';
                spans[1].style.opacity = '0';
                spans[2].style.transform = 'rotate(-45deg) translate(7px, -6px)';
            } else {
                spans[0].style.transform = '';
                spans[1].style.opacity = '';
                spans[2].style.transform = '';
            }
        }
    }

    handleNavbarScroll() {
        const navbar = document.querySelector('.navbar');
        if (navbar) {
            if (window.scrollY > 100) {
                navbar.style.background = 'rgba(255, 255, 255, 0.98)';
                navbar.style.boxShadow = '0 2px 20px rgba(0, 0, 0, 0.1)';
            } else {
                navbar.style.background = 'rgba(255, 255, 255, 0.95)';
                navbar.style.boxShadow = '';
            }
        }
    }

    proceedToCheckout() {
        if (this.cart.length === 0) {
            alert('Your cart is empty!');
            return;
        }
        alert('Thank you for your interest! This would redirect to a secure checkout page.');
    }
}

// Initialize cart when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    window.cart = new ShoppingCart();
    
    // Checkout button
    const checkoutBtn = document.querySelector('.checkout-btn');
    if (checkoutBtn) {
        checkoutBtn.addEventListener('click', () => window.cart.proceedToCheckout());
    }
});
</script>
