---
// Product Collection component with filtering
export interface Props {
    products: Array<{
        id: string;
        name: string;
        description: string;
        price: number;
        image?: string;
        category?: string;
        productType?: string;
        gender?: string;
        notes?: {
            top: string[];
            middle: string[];
            base: string[];
        };
        inStock?: boolean;
        featured?: boolean;
    }>;
    categories: Array<{
        id: string;
        name: string;
        description: string;
    }>;
    productTypes: Array<{
        id: string;
        name: string;
        description: string;
    }>;
    genders: Array<{
        id: string;
        name: string;
        description: string;
    }>;
}

const { products, categories, productTypes, genders } = Astro.props;
---

<section id="collection" class="collection">
    <div class="container">
        <h2 class="section-title">Our Signature Collection</h2>
        
        <!-- Filter Controls -->
        <div class="filter-controls">
            <div class="filter-group">
                <label>Product Type:</label>
                <select id="productTypeFilter" class="filter-select">
                    <option value="all">All Products</option>
                    {productTypes.map((type) => (
                        <option value={type.id}>{type.name}</option>
                    ))}
                </select>
            </div>
            
            <div class="filter-group">
                <label>Category:</label>
                <select id="categoryFilter" class="filter-select">
                    <option value="all">All Categories</option>
                    {categories.map((category) => (
                        <option value={category.id}>{category.name}</option>
                    ))}
                </select>
            </div>
            
            <div class="filter-group">
                <label>For:</label>
                <select id="genderFilter" class="filter-select">
                    <option value="all">Everyone</option>
                    {genders.map((gender) => (
                        <option value={gender.id}>{gender.name}</option>
                    ))}
                </select>
            </div>
        </div>
        
        <!-- Pagination Info -->
        <div class="pagination-info">
            <span id="paginationText">Showing 1-6 of {products.length} products</span>
        </div>
        
        <div class="products-grid" id="productsGrid">
            {products.map((product) => (
                <div class="product-card" 
                     data-product={product.id}
                     data-category={product.category?.toLowerCase()}
                     data-product-type={product.productType}
                     data-gender={product.gender}>
                    <div class="product-image">
                        {product.image ? (
                            <img src={product.image} alt={product.name} class="perfume-image" />
                        ) : (
                            <div class="product-placeholder"></div>
                        )}
                    </div>
                    <div class="product-info">
                        <div class="product-badges">
                            <span class="product-category">{product.category}</span>
                            <span class="product-type">{product.productType?.replace('-', ' ')}</span>
                            {product.inStock === false && <span class="out-of-stock">Out of Stock</span>}
                        </div>
                        <h3 class="product-name">{product.name}</h3>
                        <p class="product-description">{product.description}</p>
                        <div class="product-price" data-base-price={product.price}>${product.price}</div>
                        
                        <!-- View Details Link -->
                        <a href={`/product/${product.slug || product.id}`} class="view-details-link">
                            View Details
                        </a>
                        
                        <button class="add-to-cart" data-product={product.id} data-price={product.price} disabled={product.inStock === false}>
                            {product.inStock !== false ? 'Add to Cart' : 'Out of Stock'}
                        </button>
                    </div>
                </div>
            ))}
        </div>
        
        <!-- Pagination Controls -->
        <div class="pagination-controls">
            <button id="prevBtn" class="pagination-btn" disabled>
                <i class="fas fa-chevron-left"></i>
                Previous
            </button>
            
            <div class="pagination-numbers" id="paginationNumbers">
                <!-- Page numbers will be generated by JavaScript -->
            </div>
            
            <button id="nextBtn" class="pagination-btn">
                Next
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>
</section>

<style>
/* Collection Section - Minimalistic */
.collection {
    padding: 80px 0;
    background: #ffffff;
}

.products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
}

.product-card {
    background: #ffffff;
    border: 1px solid #f0f0f0;
    border-radius: 8px;
    overflow: hidden;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

.product-card:hover {
    border-color: #ddd;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.product-image {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: 75%; /* 4:3 aspect ratio */
    background: #f8f8f8;
    overflow: hidden;
    border-radius: 8px 8px 0 0;
}

.perfume-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: contain;
    object-position: center;
    transition: transform 0.3s ease;
}

.product-card:hover .perfume-image {
    transform: scale(1.05);
}

.product-placeholder {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 80px;
    height: 120px;
    background: linear-gradient(145deg, #e8e8e8, #d8d8d8);
    border-radius: 8px 8px 25px 25px;
    box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
}

.product-info {
    padding: 1.5rem;
}

.filter-controls {
    display: flex;
    gap: 1.5rem;
    margin-bottom: 3rem;
    padding: 1.5rem 2rem;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(248, 248, 248, 0.9));
    border: 1px solid rgba(139, 115, 85, 0.08);
    border-radius: 16px;
    flex-wrap: wrap;
    justify-content: center;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.06), 0 2px 8px rgba(139, 115, 85, 0.04);
    backdrop-filter: blur(20px);
    position: relative;
    overflow: hidden;
}

.filter-controls::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(139, 115, 85, 0.2), transparent);
}

.filter-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    min-width: 140px;
    position: relative;
}

.filter-group label {
    font-family: 'Inter', sans-serif;
    font-weight: 600;
    color: #1a1a1a;
    font-size: 0.8rem;
    letter-spacing: 0.8px;
    text-transform: uppercase;
    margin-bottom: 0.25rem;
    position: relative;
    padding-left: 0.5rem;
}

.filter-group label::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 2px;
    height: 12px;
    background: linear-gradient(180deg, #8b7355, #6d5a44);
    border-radius: 1px;
}

.filter-select {
    padding: 0.875rem 1rem 0.875rem 2.5rem;
    border: 1px solid rgba(139, 115, 85, 0.12);
    border-radius: 12px;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.98), rgba(250, 250, 250, 0.95));
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    font-family: 'Inter', sans-serif;
    color: #1a1a1a;
    backdrop-filter: blur(20px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04), inset 0 1px 0 rgba(255, 255, 255, 0.8);
    position: relative;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
}

.filter-select::before {
    content: 'üîç';
    position: absolute;
    left: 0.875rem;
    top: 50%;
    transform: translateY(-50%);
    font-size: 0.8rem;
    opacity: 0.6;
    pointer-events: none;
}

.filter-select::after {
    content: '‚ñº';
    position: absolute;
    right: 0.875rem;
    top: 50%;
    transform: translateY(-50%);
    font-size: 0.7rem;
    color: #8b7355;
    pointer-events: none;
    transition: transform 0.3s ease;
}

.filter-select:hover {
    border-color: rgba(139, 115, 85, 0.25);
    background: linear-gradient(135deg, rgba(255, 255, 255, 1), rgba(248, 248, 248, 0.98));
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(139, 115, 85, 0.12), 0 4px 8px rgba(0, 0, 0, 0.06), inset 0 1px 0 rgba(255, 255, 255, 0.9);
}

.filter-select:focus {
    outline: none;
    border-color: #8b7355;
    background: linear-gradient(135deg, rgba(255, 255, 255, 1), rgba(248, 248, 248, 0.98));
    box-shadow: 0 0 0 4px rgba(139, 115, 85, 0.08), 0 8px 24px rgba(139, 115, 85, 0.15), inset 0 1px 0 rgba(255, 255, 255, 0.9);
    transform: translateY(-1px);
}

.product-badges {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
    flex-wrap: wrap;
}

.product-category {
    display: inline-block;
    background: #8b7355;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.product-type {
    display: inline-block;
    background: #e8e8e8;
    color: #666;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: capitalize;
    letter-spacing: 0.5px;
}

.product-name {
    font-size: 1.2rem;
    margin-bottom: 0.5rem;
    color: #1a1a1a;
    font-weight: 400;
}

.product-description {
    color: #666;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    line-height: 1.5;
}

.product-price {
    font-size: 1.3rem;
    font-weight: 500;
    color: #1a1a1a;
    margin-bottom: 1rem;
}

.add-to-cart {
    width: 100%;
    background: #1a1a1a;
    color: white;
    border: none;
    padding: 12px;
    cursor: pointer;
    font-weight: 500;
    letter-spacing: 1px;
    transition: all 0.3s ease;
    text-transform: uppercase;
    font-size: 0.8rem;
}

.add-to-cart:hover:not(:disabled) {
    background: #333;
}

.add-to-cart:disabled {
    background: #ccc;
    color: #666;
    cursor: not-allowed;
    opacity: 0.6;
}

/* View Details Link */
.view-details-link {
    display: inline-block;
    background: transparent;
    border: 1px solid #8b7355;
    color: #8b7355;
    padding: 0.75rem 1.5rem;
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 500;
    text-align: center;
    border-radius: 6px;
    transition: all 0.3s ease;
    margin-bottom: 1rem;
    letter-spacing: 0.5px;
    text-transform: uppercase;
    font-family: 'Inter', sans-serif;
}

.view-details-link:hover {
    background: #8b7355;
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(139, 115, 85, 0.2);
}

/* Out of Stock Badge */
.out-of-stock {
    display: inline-block;
    background: #f44336;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

/* Responsive Design */
@media (max-width: 768px) {
    .products-grid {
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }
    
    .filter-controls {
        flex-direction: column;
        gap: 1rem;
        padding: 1.25rem 1rem;
        margin-bottom: 2.5rem;
        border-radius: 12px;
    }
    
    .filter-group {
        width: 100%;
        min-width: auto;
    }
    
    .filter-select {
        padding: 1rem 1rem 1rem 2.25rem;
        font-size: 0.9rem;
    }
    
    .product-image {
        padding-bottom: 80%;
    }
    
    .pagination-controls {
        gap: 0.75rem;
        margin-top: 2.5rem;
        padding: 1.5rem 0;
    }
    
    .pagination-btn {
        padding: 0.75rem 1.25rem;
        font-size: 0.8rem;
        gap: 0.375rem;
    }
    
    .pagination-numbers {
        gap: 0.375rem;
        padding: 0 0.25rem;
    }
    
    .page-number {
        padding: 0.625rem 0.75rem;
        min-width: 36px;
        font-size: 0.8rem;
    }
}

@media (max-width: 480px) {
    .products-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .product-image {
        padding-bottom: 85%;
    }
    
    .product-info {
        padding: 1rem;
    }
    
    .filter-controls {
        padding: 1rem 0.75rem;
        gap: 0.875rem;
        margin-bottom: 2rem;
        border-radius: 10px;
    }
    
    .filter-group label {
        font-size: 0.75rem;
        padding-left: 0.375rem;
    }
    
    .filter-group label::before {
        width: 1.5px;
        height: 10px;
    }
    
    .filter-select {
        padding: 0.875rem 0.875rem 0.875rem 2rem;
        font-size: 0.85rem;
        border-radius: 10px;
    }
    
    .filter-select::before {
        left: 0.75rem;
        font-size: 0.75rem;
    }
    
    .filter-select::after {
        right: 0.75rem;
        font-size: 0.65rem;
    }
    
    .pagination-controls {
        gap: 0.5rem;
        margin-top: 2rem;
        flex-direction: column;
        padding: 1rem 0;
    }
    
    .pagination-btn {
        padding: 0.75rem 1rem;
        font-size: 0.75rem;
        width: 100%;
        max-width: 180px;
        border-radius: 10px;
    }
    
    .pagination-numbers {
        gap: 0.25rem;
        order: -1;
        padding: 0;
    }
    
    .page-number {
        padding: 0.5rem 0.625rem;
        font-size: 0.75rem;
        min-width: 32px;
        border-radius: 8px;
    }
    
    .page-ellipsis {
        padding: 0.5rem 0.25rem;
        font-size: 0.8rem;
    }
}

/* Hidden products during filtering */
.product-card.hidden {
    display: none;
}

/* Pagination Styles */
.pagination-info {
    text-align: center;
    margin-bottom: 2.5rem;
    color: #666;
    font-size: 0.95rem;
    font-family: 'Inter', sans-serif;
    letter-spacing: 0.3px;
}

.pagination-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    margin-top: 3rem;
    flex-wrap: wrap;
    padding: 2rem 0;
}

.pagination-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.875rem 1.5rem;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(248, 248, 248, 0.9));
    color: #1a1a1a;
    border: 1px solid rgba(139, 115, 85, 0.12);
    border-radius: 12px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    font-size: 0.85rem;
    font-family: 'Inter', sans-serif;
    letter-spacing: 0.3px;
    text-transform: uppercase;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04), inset 0 1px 0 rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(20px);
}

.pagination-btn:hover:not(:disabled) {
    background: linear-gradient(135deg, #8b7355, #6d5a44);
    color: white;
    border-color: #8b7355;
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(139, 115, 85, 0.25), 0 4px 8px rgba(0, 0, 0, 0.06);
}

.pagination-btn:disabled {
    background: linear-gradient(135deg, rgba(240, 240, 240, 0.8), rgba(230, 230, 230, 0.7));
    color: #999;
    border-color: rgba(200, 200, 200, 0.3);
    cursor: not-allowed;
    transform: none;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    opacity: 0.6;
}

.pagination-numbers {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    padding: 0 0.5rem;
}

.page-number {
    padding: 0.75rem 0.875rem;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(248, 248, 248, 0.9));
    border: 1px solid rgba(139, 115, 85, 0.12);
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    font-size: 0.85rem;
    font-weight: 500;
    min-width: 40px;
    text-align: center;
    font-family: 'Inter', sans-serif;
    color: #1a1a1a;
    backdrop-filter: blur(20px);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.04), inset 0 1px 0 rgba(255, 255, 255, 0.8);
    position: relative;
    overflow: hidden;
}

.page-number::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(139, 115, 85, 0.1), transparent);
    transition: left 0.5s ease;
}

.page-number:hover {
    background: linear-gradient(135deg, rgba(139, 115, 85, 0.08), rgba(139, 115, 85, 0.05));
    border-color: rgba(139, 115, 85, 0.25);
    transform: translateY(-2px) scale(1.05);
    box-shadow: 0 6px 16px rgba(139, 115, 85, 0.15), 0 2px 4px rgba(0, 0, 0, 0.06);
}

.page-number:hover::before {
    left: 100%;
}

.page-number.active {
    background: linear-gradient(135deg, #8b7355, #6d5a44);
    color: white;
    border-color: #8b7355;
    box-shadow: 0 6px 16px rgba(139, 115, 85, 0.3), 0 2px 4px rgba(0, 0, 0, 0.1), inset 0 1px 0 rgba(255, 255, 255, 0.2);
    transform: translateY(-1px) scale(1.05);
    font-weight: 600;
}

.page-number.active::before {
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
}

.page-ellipsis {
    padding: 0.75rem 0.5rem;
    color: #8b7355;
    font-weight: 500;
    font-family: 'Inter', sans-serif;
    font-size: 0.9rem;
    opacity: 0.7;
    user-select: none;
}
</style>

<script>
// Import currency utilities
import('/src/utils/currencyUtils.js').then(module => {
    const { currencyUtils } = module;
    
    // Initialize currency detection and update prices
    currencyUtils.initialize().then(() => {
        updateAllPrices();
    });
    
    // Listen for currency changes
    window.addEventListener('currencyChanged', () => {
        updateAllPrices();
    });
    
    function updateAllPrices() {
        const priceElements = document.querySelectorAll('.product-price[data-base-price]');
        priceElements.forEach(element => {
            const basePrice = parseFloat(element.getAttribute('data-base-price'));
            const formattedPrice = currencyUtils.formatPrice(basePrice);
            element.textContent = formattedPrice;
        });
    }
});

document.addEventListener('DOMContentLoaded', function() {
    const productTypeFilter = document.getElementById('productTypeFilter');
    const categoryFilter = document.getElementById('categoryFilter');
    const genderFilter = document.getElementById('genderFilter');
    const productCards = document.querySelectorAll('.product-card');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const paginationNumbers = document.getElementById('paginationNumbers');
    const paginationText = document.getElementById('paginationText');
    
    // Pagination variables
    const PRODUCTS_PER_PAGE = 6;
    let currentPage = 1;
    let filteredProducts = Array.from(productCards);
    let totalPages = Math.ceil(filteredProducts.length / PRODUCTS_PER_PAGE);

    function filterProducts() {
        const selectedProductType = productTypeFilter.value;
        const selectedCategory = categoryFilter.value;
        const selectedGender = genderFilter.value;

        filteredProducts = Array.from(productCards).filter(card => {
            const cardProductType = card.getAttribute('data-product-type');
            const cardCategory = card.getAttribute('data-category');
            const cardGender = card.getAttribute('data-gender');

            let showCard = true;

            // Filter by product type
            if (selectedProductType !== 'all' && cardProductType !== selectedProductType) {
                showCard = false;
            }

            // Filter by category
            if (selectedCategory !== 'all' && cardCategory !== selectedCategory.toLowerCase()) {
                showCard = false;
            }

            // Filter by gender
            if (selectedGender !== 'all' && cardGender !== selectedGender) {
                showCard = false;
            }

            return showCard;
        });

        // Reset to first page when filters change
        currentPage = 1;
        totalPages = Math.ceil(filteredProducts.length / PRODUCTS_PER_PAGE);
        updatePagination();
        showCurrentPage();
    }

    function showCurrentPage() {
        // Hide all products first
        productCards.forEach(card => {
            card.classList.add('hidden');
        });

        // Calculate start and end indices
        const startIndex = (currentPage - 1) * PRODUCTS_PER_PAGE;
        const endIndex = startIndex + PRODUCTS_PER_PAGE;

        // Show products for current page
        filteredProducts.slice(startIndex, endIndex).forEach(card => {
            card.classList.remove('hidden');
        });

        // Update pagination info text
        const totalProducts = filteredProducts.length;
        const startProduct = totalProducts === 0 ? 0 : startIndex + 1;
        const endProduct = Math.min(endIndex, totalProducts);
        paginationText.textContent = `Showing ${startProduct}-${endProduct} of ${totalProducts} products`;
    }

    function updatePagination() {
        // Update button states
        prevBtn.disabled = currentPage === 1;
        nextBtn.disabled = currentPage === totalPages || totalPages === 0;

        // Generate page numbers
        paginationNumbers.innerHTML = '';
        
        if (totalPages <= 1) {
            return;
        }

        // Always show first page
        if (currentPage > 3) {
            addPageNumber(1);
            if (currentPage > 4) {
                addEllipsis();
            }
        }

        // Show pages around current page
        const start = Math.max(1, currentPage - 2);
        const end = Math.min(totalPages, currentPage + 2);
        
        for (let i = start; i <= end; i++) {
            addPageNumber(i);
        }

        // Always show last page
        if (currentPage < totalPages - 2) {
            if (currentPage < totalPages - 3) {
                addEllipsis();
            }
            addPageNumber(totalPages);
        }
    }

    function addPageNumber(pageNum) {
        const pageBtn = document.createElement('button');
        pageBtn.className = `page-number ${pageNum === currentPage ? 'active' : ''}`;
        pageBtn.textContent = pageNum;
        pageBtn.addEventListener('click', () => {
            currentPage = pageNum;
            updatePagination();
            showCurrentPage();
        });
        paginationNumbers.appendChild(pageBtn);
    }

    function addEllipsis() {
        const ellipsis = document.createElement('span');
        ellipsis.className = 'page-ellipsis';
        ellipsis.textContent = '...';
        paginationNumbers.appendChild(ellipsis);
    }

    // Event listeners
    prevBtn.addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            updatePagination();
            showCurrentPage();
        }
    });

    nextBtn.addEventListener('click', () => {
        if (currentPage < totalPages) {
            currentPage++;
            updatePagination();
            showCurrentPage();
        }
    });

    // Add event listeners to all filter controls
    productTypeFilter.addEventListener('change', filterProducts);
    categoryFilter.addEventListener('change', filterProducts);
    genderFilter.addEventListener('change', filterProducts);


    // Initialize pagination
    updatePagination();
    showCurrentPage();
});
</script>
